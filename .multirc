# Determine type of shell to work with
shell=""
case $SHELL in
    *"zsh"*) shell="zsh" ;;
    *"bash"*) shell="bash" ;;
    *"fish"*) shell="fish" ;;
    *) echo "$SHELL IS UNSUPORRTED" && exit 1
esac

# Add custom bin files
for bin_path in "$HOME/bin" "$HOME/.local/bin/"; do
    if [ -d "$bin_path" ]; then
        export PATH="$bin_path:$PATH"
    fi
done

# Add yarn global binaries
if yarn -v &> /dev/null; then
    export PATH="$(yarn global bin):$PATH"
fi

# Add go binaries
if [ -d "$GOPATH" ]; then
    export PATH="$GOPATH/bin:$PATH"
elif go help &> /dev/null; then
    export PATH="$(go env GOPATH)/bin:$PATH"
fi

# Add AWS autocomplete
if aws --version &> /dev/null; then
    aws_location="$(which aws)"
    if [[ -h $aws_location ]]; then
        aws_location=$(readlink $aws_location)
    fi
    if [ "$shell" = "zsh" ]; then
        source "$(dirname $aws_location)/aws_zsh_completer.sh"
    elif [ "$shell" = "bash" ]; then
        source "$(dirname $aws_location)/aws_bash_completer"
    fi
fi

# Add gopass autocomplete
if gopass --version &> /dev/null; then
    if [ "$shell" = "zsh" ]; then
        source <(gopass completion zsh | tail -n +2 | sed \$d)
        compdef _gopass gopass
    else
        source <(gopass completion $shell)
    fi
fi

# Source goto
[[ -s "/usr/local/share/goto.sh" ]] && source /usr/local/share/goto.sh

# Node Virtual Machine Config
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# The next line updates PATH and enables shell command completion for the Google Cloud SDK.
if [ -d "$HOME/google-cloud-sdk" ]; then
    source "$HOME/google-cloud-sdk/path.$shell.inc"
    source "$HOME/google-cloud-sdk/completion.$shell.inc"
fi

if exa --version &> /dev/null; then
    alias l="exa -lah"
    alias ls="exa -G"
    alias ll="exa -lh"
    alias lsa="exa -lah"
fi

# Completions for helm, kubectl and minikube for bash, because zsh got plugins for that
for kub_program in helm kubectl minikube; do
    if $kub_program help &> /dev/null; then
        case "$shell" in
        "bash")
            source <(helm completion bash)
        ;;
        esac
    fi
done

# Additional keys binding for MacOS
if [ "$(uname -s)" = "Darwin" ]; then
    bindkey "^[^[[C" forward-word
    bindkey "^[^[[D" backward-word
    bindkey "^[[H" beginning-of-line
    bindkey "^[[F" end-of-line
    export GPG_TTY=$(tty)
fi

# Default language
export LANG=en_US.UTF-8
